/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SecondaryBridge,
  SecondaryBridgeInterface,
} from "../SecondaryBridge";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
    ],
    name: "Burnt",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
    ],
    name: "Minted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "amountIssued",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "bridgeToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
    ],
    name: "updateAuthorised",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523480156200001157600080fd5b50604051620015c3380380620015c3833981810160405281019062000037919062000222565b600062000049620001ec60201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156200015a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001519062000290565b60405180910390fd5b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806080818152505033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000363565b600033905090565b60008151905062000205816200032f565b92915050565b6000815190506200021c8162000349565b92915050565b600080604083850312156200023c576200023b62000301565b5b60006200024c85828601620001f4565b92505060206200025f858286016200020b565b9150509250929050565b600062000278600f83620002b2565b9150620002858262000306565b602082019050919050565b60006020820190508181036000830152620002ab8162000269565b9050919050565b600082825260208201905092915050565b6000620002d082620002d7565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b7f496e76616c696420616464726573730000000000000000000000000000000000600082015250565b6200033a81620002c3565b81146200034657600080fd5b50565b6200035481620002f7565b81146200036057600080fd5b50565b60805161123d62000386600039600081816104610152610832015261123d6000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b1461010c57806394d008ef1461012a5780639cc7f7081461015a578063f2fde38b1461018a578063f4734b0c146101a657610093565b80631114ca6a1461009857806342966c68146100b457806370930a5c146100e4578063715018a614610102575b600080fd5b6100b260048036038101906100ad9190610af0565b6101c4565b005b6100ce60048036038101906100c99190610b91565b6102f4565b6040516100db9190610d51565b60405180910390f35b6100ec6104a0565b6040516100f99190610e4c565b60405180910390f35b61010a6104a6565b005b6101146105e0565b6040516101219190610d0d565b60405180910390f35b610144600480360381019061013f9190610b1d565b610609565b6040516101519190610d51565b60405180910390f35b610174600480360381019061016f9190610b91565b610878565b6040516101819190610e4c565b60405180910390f35b6101a4600480360381019061019f9190610af0565b610895565b005b6101ae610a3e565b6040516101bb9190610d0d565b60405180910390f35b6101cc610a68565b73ffffffffffffffffffffffffffffffffffffffff166101ea6105e0565b73ffffffffffffffffffffffffffffffffffffffff1614610240576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023790610e0c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156102b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a790610dec565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808211610338576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032f90610d8c565b60405180910390fd5b60045482111561037d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037490610e2c565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379cc679033846040518363ffffffff1660e01b81526004016103da929190610d28565b600060405180830381600087803b1580156103f457600080fd5b505af1158015610408573d6000803e3d6000fd5b50505050816004600082825461041e9190610f64565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f21bcc6fe1f41050f40434c0d1bcaac973a91e9024b0c686c0d7d154c68a264af83427f000000000000000000000000000000000000000000000000000000000000000060405161048f93929190610e67565b60405180910390a260019050919050565b60045481565b6104ae610a68565b73ffffffffffffffffffffffffffffffffffffffff166104cc6105e0565b73ffffffffffffffffffffffffffffffffffffffff1614610522576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051990610e0c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461069b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069290610dcc565b60405180910390fd5b600084116106de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d590610d8c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141561074e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074590610dac565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1986866040518363ffffffff1660e01b81526004016107ab929190610d28565b600060405180830381600087803b1580156107c557600080fd5b505af11580156107d9573d6000803e3d6000fd5b5050505083600460008282546107ef9190610f0e565b925050819055508473ffffffffffffffffffffffffffffffffffffffff167f673371784c49482c1e6bff69adc778c353a959b55a5f10f9e336b848f93c327985427f00000000000000000000000000000000000000000000000000000000000000008787604051610864959493929190610e9e565b60405180910390a260019050949350505050565b600060036000838152602001908152602001600020549050919050565b61089d610a68565b73ffffffffffffffffffffffffffffffffffffffff166108bb6105e0565b73ffffffffffffffffffffffffffffffffffffffff1614610911576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090890610e0c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610981576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097890610d6c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600033905090565b600081359050610a7f816111d9565b92915050565b60008083601f840112610a9b57610a9a611023565b5b8235905067ffffffffffffffff811115610ab857610ab761101e565b5b602083019150836001820283011115610ad457610ad3611028565b5b9250929050565b600081359050610aea816111f0565b92915050565b600060208284031215610b0657610b05611032565b5b6000610b1484828501610a70565b91505092915050565b60008060008060608587031215610b3757610b36611032565b5b6000610b4587828801610a70565b9450506020610b5687828801610adb565b935050604085013567ffffffffffffffff811115610b7757610b7661102d565b5b610b8387828801610a85565b925092505092959194509250565b600060208284031215610ba757610ba6611032565b5b6000610bb584828501610adb565b91505092915050565b610bc781610f98565b82525050565b610bd681610faa565b82525050565b6000610be88385610eec565b9350610bf5838584610fe0565b610bfe83611037565b840190509392505050565b6000610c16602683610efd565b9150610c2182611048565b604082019050919050565b6000610c39601d83610efd565b9150610c4482611097565b602082019050919050565b6000610c5c601f83610efd565b9150610c67826110c0565b602082019050919050565b6000610c7f602283610efd565b9150610c8a826110e9565b604082019050919050565b6000610ca2600f83610efd565b9150610cad82611138565b602082019050919050565b6000610cc5602083610efd565b9150610cd082611161565b602082019050919050565b6000610ce8603683610efd565b9150610cf38261118a565b604082019050919050565b610d0781610fd6565b82525050565b6000602082019050610d226000830184610bbe565b92915050565b6000604082019050610d3d6000830185610bbe565b610d4a6020830184610cfe565b9392505050565b6000602082019050610d666000830184610bcd565b92915050565b60006020820190508181036000830152610d8581610c09565b9050919050565b60006020820190508181036000830152610da581610c2c565b9050919050565b60006020820190508181036000830152610dc581610c4f565b9050919050565b60006020820190508181036000830152610de581610c72565b9050919050565b60006020820190508181036000830152610e0581610c95565b9050919050565b60006020820190508181036000830152610e2581610cb8565b9050919050565b60006020820190508181036000830152610e4581610cdb565b9050919050565b6000602082019050610e616000830184610cfe565b92915050565b6000606082019050610e7c6000830186610cfe565b610e896020830185610cfe565b610e966040830184610cfe565b949350505050565b6000608082019050610eb36000830188610cfe565b610ec06020830187610cfe565b610ecd6040830186610cfe565b8181036060830152610ee0818486610bdc565b90509695505050505050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610f1982610fd6565b9150610f2483610fd6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610f5957610f58610fef565b5b828201905092915050565b6000610f6f82610fd6565b9150610f7a83610fd6565b925082821015610f8d57610f8c610fef565b5b828203905092915050565b6000610fa382610fb6565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f416d6f756e74206d7573742062652067726561746572207468616e2030000000600082015250565b7f41646472657373206d75737420626520612076616c6964206164647265737300600082015250565b7f43616c6c65722063616e6e6f742065786375746520746869732066756e63746960008201527f6f6e000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c6964206163636f756e740000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416d6f756e74206d757374206265206c657373207468616e206f72206571756160008201527f6c20746f2074686520616d6f756e742069737375656400000000000000000000602082015250565b6111e281610f98565b81146111ed57600080fd5b50565b6111f981610fd6565b811461120457600080fd5b5056fea2646970667358221220ad6657175d2c628cadf8182802bfa7e0ff430ee4c80da330cd1fe0b40960d23e64736f6c63430008060033";

export class SecondaryBridge__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    token: string,
    chainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SecondaryBridge> {
    return super.deploy(
      token,
      chainId,
      overrides || {}
    ) as Promise<SecondaryBridge>;
  }
  getDeployTransaction(
    token: string,
    chainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(token, chainId, overrides || {});
  }
  attach(address: string): SecondaryBridge {
    return super.attach(address) as SecondaryBridge;
  }
  connect(signer: Signer): SecondaryBridge__factory {
    return super.connect(signer) as SecondaryBridge__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SecondaryBridgeInterface {
    return new utils.Interface(_abi) as SecondaryBridgeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SecondaryBridge {
    return new Contract(address, _abi, signerOrProvider) as SecondaryBridge;
  }
}
